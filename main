// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}

// Returns a random single strand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}


//step 3
const pAequorFactory = (speciemenNum, dna) => {
  return {
    speciemenNum: speciemenNum,
    dna: mockUpStrand(),
    mutate(){
      randIndex = Math.floor(Math.random() * 15)
      console.log(randIndex)
      dnaIndex = this.dna[randIndex]
      if(dnaIndex === "A"){
        this.dna[randIndex] = 'T'
      }else if(dnaIndex === 'T'){
        this.dna[randIndex] = 'C'
      }else if(dnaIndex === 'C'){
        this.dna[randIndex] = 'G'
      } else if(dnaIndex === 'G'){
        this.dna[randIndex] = 'A'
      }else {
        return 'Invalid DNA'
      }
      return this.dna
    },
    compareDNA(anotherSpecie){
      const sameDNA = [];
      for(let i = 0; i < this.dna.length; i++){
        if(this.dna[i] === anotherSpecie.dna[i]){
          sameDNA.push(this.dna[i])
        }
      }
      // console.log(sameDNA)
      totalSameDNA = sameDNA.length;
      percentSameDNA = ((totalSameDNA * 100) / this.dna.length).toFixed(2);

      console.log(`specimen #${this.speciemenNum} and specimen #${anotherSpecie.speciemenNum} have ${percentSameDNA}% DNA in common`)
    },
    willLikelySurvive(){
      const surviveDNA = this.dna.filter(e => e === 'C' || e === 'G');
      // console.log(surviveDNA)
      const surviveDNAPercent = ((surviveDNA.length * 100) / this.dna.length).toFixed(2);
      // console.log(surviveDNAPercent)
      if(surviveDNAPercent >= 60.00){
        return true
      } else {
        return false
      }
    }, 
  }
};
const thirtyGroup = []
const genThirtySurviveSpecies = () => {
  for(let i = 0; thirtyGroup.length < 30; i++){
    let organism = pAequorFactory(i);
    if(organism.willLikelySurvive() === true){
      thirtyGroup.push(organism)
    };
  }
};

genThirtySurviveSpecies();
thirtyGroup.forEach(e => console.log(e.willLikelySurvive()))

// firstOrganism = pAequorFactory(1);
// secondOrganism = pAequorFactory(2);
// console.log(firstOrganism);
// console.log(firstOrganism.dna.length);
// firstOrganism.mutate();
// console.log(firstOrganism)
// console.log(secondOrganism)
// firstOrganism.compareDNA(secondOrganism);
// console.log(firstOrganism.willLikelySurvive());

